{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from tkinter import ttk\n",
    "\n",
    "exp = \" \"\n",
    "def press(num):\n",
    "    global exp\n",
    "    exp+=str(num)\n",
    "    equation.set(exp)\n",
    "    \n",
    "def clear ():\n",
    "    global exp\n",
    "    exp = \" \"\n",
    "    equation.set(\" \")\n",
    "\n",
    "def taxamount(income):\n",
    "    totalamount=0\n",
    "    tax=0\n",
    "    if income <= 500000:\n",
    "        tax = 0\n",
    "        \n",
    "    elif income <= 1000000:\n",
    "        tax = 12500 + (income) * 0.20\n",
    "        \n",
    "    elif income >= 1000001:\n",
    "        tax = 112500 + (income) * 0.30\n",
    "    else:\n",
    "        tax = 12500+100000+(income - 1000000)* 0.3\n",
    "    \n",
    "    totalamount=tax\n",
    "    return totalamount\n",
    "\n",
    "def butter():\n",
    "    income=IntVar()\n",
    "    income=incomefield.get()\n",
    "    entryField.delete(0,'end')\n",
    "    amount = taxamount(int(income))\n",
    "    print(amount)\n",
    "    entry.set(str(amount))\n",
    "    \n",
    "\n",
    "\n",
    "root=Tk() \n",
    "\n",
    "\n",
    "\n",
    "root.configure(background=\"lightgrey\")\n",
    "root.resizable(width=None,height=None)\n",
    "root.geometry('300x420')\n",
    "root.title(\"income Tax Calculator\")\n",
    "\n",
    "entry= StringVar()\n",
    "equation = tk.StringVar()\n",
    "\n",
    "\n",
    "\n",
    "labelincome = Label(root,text=\"Your Income\",background=\"royalblue\",foreground=\"White\")\n",
    "labelincome.place(x=110,y=0)\n",
    "incomefield = Entry(root,textvariable = equation, width = 40,background=\"SkyBlue2\",foreground=\"black\")\n",
    "incomefield.place(x=25,y=21)\n",
    "\n",
    "\n",
    "totaltax = Label(root,text=\"Total Tax\",background=\"royalblue\",foreground=\"white\")\n",
    "totaltax.place(x=120,y=60)\n",
    "entryField = Entry(root,textvariable = entry, width = 40,background=\"Yellowgreen\",foreground=\"black\",justify=CENTER)\n",
    "entryField.place(x=27,y=80)\n",
    "\n",
    "\n",
    "\n",
    "button = Button(root,text=\"find income tax\", width = 40, command=butter)\n",
    "button.place(x=5,y=260)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "btn9 = ttk.Button(root, text = '9' , width = 15 ,  command = lambda : press(9) )\n",
    "btn9.place(x=0,y=290 )\n",
    "\n",
    "btn8 = ttk.Button(root, text = '8' , width = 15 ,  command = lambda : press(8) )\n",
    "btn8.place(x=100,y=290)\n",
    "\n",
    "btn7 = ttk.Button(root, text = '7' , width = 15 ,  command = lambda : press(7) )\n",
    "btn7.place(x=200,y=290)\n",
    "\n",
    "btn6 = ttk.Button(root, text = '6' , width = 15 ,  command = lambda : press(6) )\n",
    "btn6.place(x=0,y=315 )\n",
    "\n",
    "btn5 = ttk.Button(root, text = '5' , width = 15 ,  command = lambda : press(5) )\n",
    "btn5.place(x=101,y=315)\n",
    "\n",
    "btn4 = ttk.Button(root, text = '4' , width = 15 ,  command = lambda : press(4) )\n",
    "btn4.place(x=200,y=315)\n",
    "\n",
    "btn3 = ttk.Button(root, text = '3' , width = 15,  command = lambda : press(3)  )\n",
    "btn3.place(x=2,y=340)\n",
    "\n",
    "btn2 = ttk.Button(root, text = '2' , width = 15,  command = lambda : press(2)  )\n",
    "btn2.place(x=101,y=340)\n",
    "\n",
    "btn1 = ttk.Button(root, text = '1' , width = 15 ,  command = lambda : press(1) )\n",
    "btn1.place(x=200,y=340)\n",
    "\n",
    "btn0= ttk.Button(root, text = '0' , width = 48,  command = lambda : press(0)  )\n",
    "btn0.place(x=0,y=368)\n",
    "\n",
    "btnclr = ttk.Button(root, text = 'Clear' , width = 48,  command = clear )\n",
    "btnclr.place(x=0,y=392)\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
